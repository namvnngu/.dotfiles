"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS                                                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax off
colorscheme wildcharm
filetype plugin indent on

let mapleader = ' '
let &background = $THEME_MODE

set shiftwidth=2
set expandtab
set smarttab
set softtabstop=2
set tabstop=4

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set colorcolumn=80
set complete-=i
set completeopt=menu,menuone,popup,noinsert,noselect
set copyindent
set cursorline
set display+=lastline,truncate
set foldlevel=99
set foldlevelstart=99
set formatoptions+=j
set grepformat=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set linebreak
set nobackup
set nolangremap
set noswapfile
set notermguicolors
set noundofile
set nowrap
set nrformats-=octal
set number
set omnifunc=syntaxcomplete#Complete
set preserveindent
set relativenumber
set ruler
set scrolloff=8
set sessionoptions-=options
set shiftround
set shortmess=ltToOCF
set showtabline=0
set sidescroll=1
set sidescrolloff=2
set signcolumn=yes
set smartcase
set smoothscroll
set ttimeout ttimeoutlen=50
set undolevels=10000
set viewoptions-=options
set viminfo^=!
set virtualedit=block
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum,tagfile
set winminwidth=5

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPPINGS                                                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Avoid using arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Move to window
nnoremap <Leader>h <C-W>h
nnoremap <Leader>j <C-W>j
nnoremap <Leader>k <C-W>k
nnoremap <Leader>l <C-W>l

" Yank the current file path
nnoremap yp :call setreg('+', expand('%:p'))<CR>

" Better indenting
vnoremap < <gv
vnoremap > >gv

" Move lines
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Clear highlighting search
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Set a new undo point before joining lines
nnoremap J mzJ`z

" Keep it centered and stable
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <C-D> <C-D>zz
nnoremap <C-U> <C-U>zz
nnoremap <C-F> <C-F>zz
nnoremap <C-B> <C-B>zz

" Navigate quickfix list
nnoremap <C-J> :cnext<CR>zz
nnoremap <C-K> :cprev<CR>zz

" Toggle spelling checker
map <F12> :setlocal spell! spelllang=en_us<CR>

" Replace currently selected text with black hole register without yanking it
vnoremap <Leader>p "_dP

" Delete without yanking
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d

" Cancel
inoremap <C-C> <Esc>

" Replace word under cursor
nnoremap <Leader>s :%s/\<<C-R><C-W>\>/<C-R><C-W>/gI<Left><Left><Left>

" Make file executable
nnoremap <silent> <Leader>x :!chmod +x %<CR>

" Create or edit file
nnoremap <Leader>e :e <C-R>=expand('%:p:h') . '/'<CR>

" Exit terminal
tnoremap <C-D> <C-\><C-N>:q!<CR>

" Fix the indentation of the entire file
function s:fix_indent()
  let l:view = winsaveview()
  keepjumps keeppatterns silent! norm gg=G
  call winrestview(l:view)
endfunction
nnoremap <Leader>= :call <SID>fix_indent()<CR>

" Format the entire file
function s:format()
  let l:view = winsaveview()
  keepjumps keeppatterns silent! norm gggqG
  call winrestview(l:view)
endfunction
nnoremap <Leader>gq :call <SID>format()<CR>

" Preview markdown
nnoremap <Leader>mp :!mdp '%'<CR>

" Set a new undo point before deleting text in insert mode
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

" Open file explorer
nnoremap - :Ex<CR>

" Switch between C source and header file
nnoremap <F5> :e %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ABBREVIATIONS                                                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

ia <expr> me:: strftime('Author: Nam Nguyen <vnngucs@outlook.com><CR>
                       \Description:<CR>
                       \License: The Unlicense<CR>
                       \Date created: %B %d, %Y<CR>
                       \Date modified: %B %d, %Y')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMMANDS                                                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup trim_spaces
  autocmd!
  autocmd BufWritePre * call s:trim_spaces()

  function s:trim_spaces()
    let l:view = winsaveview()
    keepjumps keeppatterns silent! %s/\s\+$//e
    keepjumps keeppatterns silent! %s/\%^\n\+//
    keepjumps keeppatterns silent! %s/\(\n\n\)\n\+/\1/
    keepjumps keeppatterns silent! %s/\($\n\s*\)\+\%$//
    call winrestview(l:view)
  endfunction
augroup END

augroup mark_postqf
  autocmd!
  autocmd QuickFixCmdPost norm mG
augroup END

augroup mkdir_on_edit
  autocmd!
  autocmd BufWritePre * call s:mkdir_on_edit(expand('<afile>:p:h'))

  function! s:mkdir_on_edit(dir)
    if a:dir =~ '^/'
          \ && !isdirectory(a:dir)
          \ && input("'" . a:dir . "' does not exist. Create? [y/N]") =~? '^y\%[es]$'
      call mkdir(a:dir, 'p')
    endif
  endfunction
augroup END

augroup c_ft
  autocmd!
  autocmd FileType c,cpp     setlocal tags=./tags,tags,~/.tags/c-system
  autocmd FileType c,cpp     if executable('clang-format') | setlocal formatprg=clang-format | endif
  autocmd BufEnter *.c,*.cpp command! Run :vs | term cc -o %:p:r % && %:p:r
augroup END

augroup markdown_ft
  autocmd!
  autocmd FileType markdown setlocal textwidth=80
augroup END

augroup typst_ft
  autocmd!
  autocmd FileType typst setlocal textwidth=80
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMANDS                                                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

command! Ctags !ctags -R .

command! -nargs=1 Cht sp | enew | .!curl -s 'cht.sh/<args>?T'

command! -nargs=1 Gg !gg <args>

command! -nargs=1 Ddg !ddg <args>

command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
      \ | diffthis | wincmd p | diffthis

command! SendQf call s:send_qf()
function s:send_qf()
  let l:list = []
  for line in getline(0, '$')
    let l:match = matchlist(line, '\v^(.+)\|(\d+) col (\d+)\| (.*)$')
    if len(l:match) != 0 && l:match[1] != ''
      call add(l:list, {'filename': l:match[1], 'lnum': l:match[2], 'col': l:match[3], 'text': l:match[4]})
    endif
  endfor

  call setqflist(l:list, 'r')
  bdelete!
  copen
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS                                                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let s:PLUGIN_ROOT = expand('~/.vim/pack/plugins/start')
let s:PLUGIN_URLS = [
      \ 'https://github.com/tpope/vim-fugitive',
      \ 'https://github.com/junegunn/fzf',
      \ 'https://github.com/ludovicchabant/vim-gutentags',
      \ 'https://github.com/godlygeek/tabular',
      \ ]

function s:install_plugins()
  let l:install_urls = ''
  let l:installing_msg = ''
  let l:installed_msg = ''

  for url in s:PLUGIN_URLS
    let l:name = fnamemodify(url, ':t')
    let l:path = expand(s:PLUGIN_ROOT . '/' . l:name)

    if !isdirectory(l:path)
      let l:install_urls = l:install_urls . '\n' . url
      let l:installing_msg = l:installing_msg . "\nInstalling " . l:name . '...'
      let l:installed_msg = l:installed_msg . "\nInstalled " . l:name . '!'
    endif
  endfor

  if !empty(l:install_urls)
    echo trim(l:installing_msg)

    call system("echo -e '" . trim(l:install_urls) . "' "
             \. "| xargs -P8 -I{} sh -c "
             \. "'git clone --depth=1 --filter=blob:none {} "
             \. s:PLUGIN_ROOT . "/$(basename {})'")

    echo trim(l:installed_msg)
  endif
endfunction

command! Pc echo 'Plugin count: ' . len(s:PLUGIN_URLS)
command! Pu call system('rm -rf ' . s:PLUGIN_ROOT)
        \|  call s:install_plugins()
        \|  echo 'Updated all plugins. Restart Vim to get latest updates.'
command! Pl for path in globpath(s:PLUGIN_ROOT, "*", 0, 1)
        \|    echo fnamemodify(path, ':t') . ': ' . path
        \|  endfor

call s:install_plugins()

" matchit.vim
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" man
if exists(':Man') != 2 && !exists('g:loaded_man') && &filetype !=? 'man' && !has('nvim')
  runtime ftplugin/man.vim
endif

" netrw
let g:netrw_liststyle = 1
let g:netrw_sizestyle = "H"

" fzf
nnoremap <C-P> :FZF<CR>

" vim-gutentags
let g:gutentags_project_root = ['README.md']
