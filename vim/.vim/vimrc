"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS                                                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ' '

syntax off
filetype plugin indent on
colorscheme wildcharm

set autoindent
set autoread
set breakindent
set clipboard+=unnamedplus,unnamed
set colorcolumn=80
set completeopt=menu,menuone,popup,noinsert,noselect
set copyindent
set cursorline
set expandtab
set foldlevel=99
set foldlevelstart=99
set grepformat=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set linebreak
set nobackup
set noswapfile
set noundofile
set nowrap
set nowritebackup
set number
set omnifunc=syntaxcomplete#Complete
set preserveindent
set relativenumber
set scrolloff=8
set shiftround
set shiftwidth=2
set showtabline=0
set sidescrolloff=8
set signcolumn=yes
set smartcase
set smartindent
set smoothscroll
set splitbelow
set splitright
set statusline=%<%F\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set tabstop=2
set timeoutlen=500
set undolevels=10000
set updatetime=50
set virtualedit=block
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum,tagfile
set winminwidth=5

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS                                                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Avoid using arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Move to window
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" Yanking
nnoremap <leader>ya :%y+<CR>
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+y$
nnoremap Y y$

" Buffers
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprevious<CR>
nnoremap <leader>bd :bdelete<CR>
nnoremap <leader>ba :bufdo bd<CR>
nnoremap <leader>be :%bd\|e#<CR>

" Better indenting
vnoremap < <gv
vnoremap > >gv

"  Move lines
nnoremap <leader>md :m .+1<CR>==
nnoremap <leader>mu :m .-2<CR>==
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Clear search with <Esc>
nnoremap <Esc> :noh<CR>

" Keeping it centered and stable
nnoremap J mzJ`z
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <C-D> <C-D>zz
nnoremap <C-U> <C-U>zz

" Quickfix list
nnoremap <C-J> :cnext<CR>zz
nnoremap <C-K> :cprev<CR>zz

" Location list
nnoremap <leader>J :lnext<CR>zz
nnoremap <leader>K :lprev<CR>zz

" Toggle spelling checker
map <F12> :setlocal spell! spelllang=en_us<CR>

" Replace currently selected text with default register without yanking it
xnoremap <leader>p "_dP

" Delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" Cancel
inoremap <C-C> <Esc>

" Replace
nnoremap <leader>s :%s/\<<C-R><C-W>\>/<C-R><C-W>/gI<Left><Left><Left>

" Make file executable
nnoremap <silent> <leader>x :!chmod +x %<CR>

" Copy the current file's path
nnoremap yp :exec setreg('+', expand('%:p'))<CR>

" Switch file
nnoremap <leader>e :e <C-R>%

" Open a file name under cursor in a new vertical split
nnoremap <leader><C-W>F :vertical wincmd F<CR>

" Exit terminal
tnoremap <C-D> <C-\><C-n>:q!<CR>

" Switch between C source and header file
nnoremap <F5> :e %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>

" Fix the indentation of an entire file
nnoremap <leader>F gg=G''

" Set undo points when deleting text in insert mode
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ABBREVIATIONS                                                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

ia <expr> me:: strftime('Author: Nam Nguyen <vnngucs@outlook.com><CR>Date: %d %b %Y<CR>License: MIT')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMMANDS                                                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup trim_white_space
  autocmd!
  autocmd BufWritePre * call s:TrimWhiteSpace()
augroup END
function s:TrimWhiteSpace()
  let l:save = winsaveview()
  keepjumps keeppatterns silent! %s/\s\+$//e
  keepjumps keeppatterns silent! %s/\%^\n\+//
  keepjumps keeppatterns silent! %s/\(\n\n\)\n\+/\1/
  keepjumps keeppatterns silent! %s/\($\n\s*\)\+\%$//
  call winrestview(l:save)
endfunction

augroup lang_tags
  autocmd!
  autocmd BufEnter,BufNew * set tags='./tags,tags'
augroup END
augroup c_tags
  autocmd!
  autocmd BufEnter,BufNew *.c,*.h call s:SetTags('c')
augroup END
function s:SetTags(lang)
  let l:files = globpath('~/.tags/' . a:lang, '*', 0, 1)
  if len(l:files) == 0
    let &tags = './tags,tags'
  else
    let &tags = './tags,tags,' . join(l:files, ',')
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMANDS                                                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

command! Ctags !ctags -R .

command! -nargs=1 Cht :sp | enew | .!curl -s "cht.sh/<args>?T"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS                                                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let s:PLUG_ROOT = '~/.vim/pack/plugins/start'
let s:PLUG_URLS = [
      \ 'https://github.com/tpope/vim-fugitive',
      \ 'https://github.com/junegunn/fzf',
      \ 'https://github.com/mcchrish/nnn.vim',
      \ ]

command! Plugr call system('rm -rf ' . s:PLUG_ROOT) | echo 'Removed all plugins'
command! Plugc echo 'Plugin count: ' . len(s:PLUG_URLS)
command! Plugl for plug_url in s:PLUG_URLS
            \|   echo fnamemodify(plug_url, ':t') . ': ' . plug_url
            \| endfor

for plug_url in s:PLUG_URLS
  let s:plug_name = fnamemodify(plug_url, ':t')
  let s:plug_dir = expand(s:PLUG_ROOT . '/' . s:plug_name)

  if !isdirectory(s:plug_dir)
    echo 'Installing ' . s:plug_name . '...'
    call system('git clone --depth 1 ' . plug_url . ' ' . s:plug_dir)
    echo 'Installed ' . s:plug_name . '!'
    echo ' '
  endif
endfor
unlet s:plug_name
unlet s:plug_dir

" fzf
nnoremap <C-p> :FZF<CR>

" nnn
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1
let g:nnn#command = 'nnn -AdeH'
let g:nnn#set_default_mappings = 0
nnoremap <expr> - ':NnnPicker ' . (@% == '' ? getcwd() : '%:p:h') . '<CR>'
