#!/usr/bin/env bash

# Author: Nam Nguyen <vnngucs@outlook.com>
# Description: The URL bookmark manager (bm)
# License: The Unlicense
# Date created: July 02, 2025
# Date modified: July 06, 2025

# DESIGN COMMAND
#
# Command: bm
#
# ==============================================================================
# BOOKMARK FILE
#
# Each line in the bookmark file represents a single bookmark. Each bookmark has
# 3 fields: category, title, and URL. The fields separated by the '|' character.
#
#                              category|title|url
#
# ==============================================================================
# ADD A BOOKMARK
#
# Subcommand: add
# Options
#   -c  Category
#   -t  Title
#   -u  URL
#
# If one of the options is not provided, bm enters interactive mode and prompts
# to input the category, title, and/or URL. All options must be provided. In
# both cases, once the option values are provided, bm adds a new bookmark to
# the bookmark file using the format described above.The new bookmark is
# inserted in alphabetical order (Aâ€“Z).
#
# ==============================================================================
# OPEN A BOOKMARK
#
# Subcommand: open
# Options
#   -l Line number
#
# If no options are provided, bm enters interactive mode, and displays all
# bookmarks from the file using the fzf view. If one of the options is
# provided, bm attempts to find the matching bookmark, and exits if none is
# found. In both cases, once a bookmark is selected or found, its URL will be
# extracted and opened in your default browser.
#
# ==============================================================================
# COPY A BOOKMARK
#
# Subcommand: cp
# Options
#   -l Line number
#
# If no options are provided, bm enters interactive mode, and displays all
# bookmarks from the file using the fzf view. If one of the options is
# provided, bm attempts to find the matching bookmark, and exits if none is
# found. In both cases, once a bookmark is selected or found, its URL will be
# copied to clipboard.
#
# ==============================================================================
# REMOVE A BOOKMARK
#
# Subcommand: rm
# Options
#   -l Line number
#
# If no options are provided, bm enters interactive mode, and displays all
# bookmarks from the file using the fzf view. If one of the options is
# provided, bm attempts to find the matching bookmark, and exits if none is
# found. In both cases, once a bookmark is selected or found, its URL will be
# removed from the bookmark file.
#
# ==============================================================================
# PRINT HTML OUTPUT
#
# Subcommand: out
#
# Print the bookmarks in HTML format.
#
# ==============================================================================
# VIEW BOOKMARKS
#
# Subcommand: view
#
# Print the content of the bookmark file.
#
# ==============================================================================
# DISPLAY HELP
#
# Subcommand: help
#
# Print the usage information.

# STRICT MODE

set -o nounset
set -o errexit
set -o pipefail

trap 'echo "Error at about line $LINENO. Exit code $?" >&2' ERR
set -o errtrace

IFS=$'\n\t'

# GLOBALS

_cmd="$(basename "${0}")"
_version="0.1.0"

_bm_file="${DOTFILES_PATH}/bookmark/bm.txt"

# UTILITIES FUNCTIONS

_exit_1() {
  printf "%s: %s\n" "$(tput setaf 1)Error$(tput sgr0)" "${*}" >&2
  exit 1
}

# CORE FUNCTIONS

_add_bm() {
  printf "TODO: add\n"
}

_out_bm() {
  printf "TODO: out\n"
}

_view_bm() {
  cat "${_bm_file}"
}

# MAIN

_main() {
  local subcmd="${1:-help}"
  case "${subcmd}" in
    add)
      _add_bm
      ;;
    open)
      printf "TODO: open\n"
      ;;
    cp)
      printf "TODO: cp\n"
      ;;
    rm)
      printf "TODO: rm\n"
      ;;
    out)
      _out_bm
      ;;
    view)
      _view_bm
      ;;
    help | --help | -h)
      printf "TODO: help\n"
      ;;
    *)
      _exit_1 "unknown subcommand '${subcmd}'." \
        "For more information, try '${_cmd} help' or '${_cmd} -h'."
      ;;
  esac
}

_main "${@}"
